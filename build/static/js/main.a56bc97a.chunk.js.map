{"version":3,"sources":["res/logo.png","components/imagepanel/imagepanel.js","components/row/row.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImagePanel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hover","width","height","bind","assertThisInitialized","leave","updateWindowDimensions","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","seiyu","onHover","id","element","document","getElementById","midpoint","offset","offsetLeft","react_default","a","createElement","onMouseEnter","onMouseLeave","className","concat","role","nameEng","anime","href","URL","target","index_es","icon","faExternalLinkSquareAlt","lib_default","src","url","alt","label","labelURL","descriptionGen","Component","Row","_this2","console","log","setTimeout","rank","scroll","_this3","imagepanel_imagepanel","rowInfo","pictureURL","roles","map","key","App","counter","Logo","faGithubAlt","RowData","slice","row_row","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a56bc97a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba6f03b2.png\";","import React, {Component} from 'react';\nimport './imagepanel.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkSquareAlt } from '@fortawesome/free-solid-svg-icons'\nimport LazyLoad from 'react-lazyload';\n\nclass ImagePanel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hover: false,\n            width: 0,\n            height: 0\n        };\n        this.hover = this.hover.bind(this);\n        this.leave = this.leave.bind(this);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({width: window.innerWidth, height: window.innerHeight});\n    }\n\n    hover() {\n        this.setState({hover: true});\n        if (!this.props.seiyu) {\n            this.props.onHover(this.props.id);\n        }\n    }\n\n    leave() {\n        this.setState({hover: false});\n    }\n\n    descriptionGen() {\n        if (this.props.seiyu) {\n            return '';\n        }\n        const element = document.getElementById(this.props.id);\n        const midpoint = this.state.width/2;\n        const offset = element.offsetLeft - midpoint;\n        return <div onMouseEnter={this.hover} onMouseLeave={this.leave} className={`image-panel-description ${offset > 0 ? 'image-panel-description-left' : 'image-panel-description-right'}`}>\n            <div className=\"image-panel-description-name\">{this.props.role.nameEng}</div>\n            <div>{this.props.role.anime}</div>\n            <div className=\"image-panel-external-link\"> <a href={this.props.role.URL} target=\"_blank\">Full Character Page <FontAwesomeIcon icon={faExternalLinkSquareAlt} /></a></div>\n\n        </div>\n    }\n\n    render() {\n        return (\n            <div className={`image-panel ${this.state.hover ? 'image-panel-hover' : ''}`} onMouseEnter={this.hover}\n                 onMouseLeave={this.leave} id={this.props.id}>\n                <LazyLoad height={200}>\n                <img\n                    className={`${this.props.seiyu ? '' : `character-panel ${this.state.hover ? 'character-panel-hover' : ''}`} panel-image`}\n                    src={this.props.url}\n                    alt=\"panel-image\"/>\n                    </LazyLoad>\n                {this.props.label ? <div className=\"image-panel-label\">{this.props.label}<a href={this.props.labelURL} target=\"_blank\"> <FontAwesomeIcon icon={faExternalLinkSquareAlt} /></a></div> : ''}\n                {this.state.hover ? this.descriptionGen() : ''}\n\n            </div>\n        );\n    }\n}\n\nexport default ImagePanel;\n","import React, {Component} from 'react';\nimport './row.css';\nimport ImagePanel from '../imagepanel/imagepanel'\n\nclass Row extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {width: 0, height: 0};\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.onHover = this.onHover.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({width: window.innerWidth, height: window.innerHeight});\n    }\n\n    onHover(id) {\n        const element = document.getElementById(id);\n        const midpoint = this.state.width/2;\n        console.log(element.offsetLeft - midpoint, 0);\n        setTimeout(()=>{\n           document.getElementById(`seiyu-roles-${this.props.rank}`).scroll(element.offsetLeft - midpoint, 0);\n        }, 100)\n        //element.scrollLeft({behavior: 'smooth'});\n        //console.log(id);\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"seiyu-ranking\">{this.props.rank}</div>\n                <div className=\"seiyu-image-panel\">\n                    <ImagePanel seiyu={true} url={this.props.rowInfo.pictureURL} label={this.props.rowInfo.nameEng} labelURL={this.props.rowInfo.URL}/>\n                </div>\n                <div className=\"seiyu-roles\" id={`seiyu-roles-${this.props.rank}`}>\n                    {\n                        this.props.rowInfo.roles.map(role => <ImagePanel seiyu={false} url={role.pictureURL}\n                                                                         key={role.nameEng} id={role.nameEng}\n                                                                         onHover={this.onHover} role={role}/>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Row;\n","import React, { Component } from 'react';\nimport RowData from './data';\nimport './App.css';\nimport Row from './components/row/row'\nimport Logo from './res/logo.png'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithubAlt } from '@fortawesome/free-brands-svg-icons'\n\nclass App extends Component {\n  render() {\n      let counter = 1;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <img src={Logo} />\n            <div className=\"github-button\">\n                <a href={'https://github.com/stevezease/same_seiyu'} target=\"_blank\">\n            <FontAwesomeIcon icon={faGithubAlt} />\n                </a>\n            </div>\n        </header>\n          <div>{\n              RowData.slice(0,50).map(rowInfo => <Row rank={counter++} rowInfo={rowInfo}/>)\n          }</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}